import gimnasia.*

describe "rutinas" {

//Punto 1: rutinas
	const correrEnLaPlaya = new Running(intensidad = 1.2)
	const remarEnElDelta = new Remo()
	const remarEnCaminoRemeros = new RemoDeCompeticion()
	const maratonBA = new Maraton(intensidad = 1.5)
//Punto 2: personas
	const calamardo = new PersonaSedentaria(peso = 60, tiempoEjercitacion = 5)
	const bob = new PersonaAtleta(peso = 40)
//Punto 3: clubes
	const recreo = new Predio(rutinas = #{ correrEnLaPlaya, maratonBA })
	const nautico = new Predio(rutinas = #{ remarEnElDelta, remarEnCaminoRemeros })
	const clubBarrial = new Club(predios = #{ recreo, nautico })

// PUNTO 1
	test "1.1 consulta running" {
		assert.equals(360, correrEnLaPlaya.caloriasQueQuema(5))
		assert.equals(10200, correrEnLaPlaya.caloriasQueQuema(90))
	}

	test "1.2 consulta maraton" {
		assert.equals(900, maratonBA.caloriasQueQuema(5))
		assert.equals(25500, maratonBA.caloriasQueQuema(90))
	}

	test "1.3 consulta remo" {
		assert.equals(520, remarEnElDelta.caloriasQueQuema(5))
		assert.equals(9360, remarEnElDelta.caloriasQueQuema(90))
	}

	test "1.4 consulta remo competitivo" {
		assert.equals(510, remarEnCaminoRemeros.caloriasQueQuema(5))
		assert.equals(12750, remarEnCaminoRemeros.caloriasQueQuema(90))
	}


//Punto 2: Personas
	test '2.1.1 test sedentario running' {
		calamardo.aplicaRutina(correrEnLaPlaya)
		assert.equals(59.948, calamardo.peso().truncate(3))
	}

	test '2.1.2 test sedentario maraton' {
		calamardo.aplicaRutina(maratonBA)
		assert.equals(59.871, calamardo.peso().truncate(3))
	}

	test '2.1.3 test sedentario remo' {
		calamardo.aplicaRutina(remarEnElDelta)
		assert.equals(59.925, calamardo.peso().truncate(3))
	}

	test '2.1.3 test sedentario remo competicion' {
		calamardo.aplicaRutina(remarEnCaminoRemeros)
		assert.equals(59.927, calamardo.peso().truncate(3))
	}

	test '2.1.5 test sedentario no puede practicar' {
		const calamardo40 = new PersonaSedentaria(peso = 40, tiempoEjercitacion = 5)
		assert.throwsException({ calamardo40.aplicaRutina(correrEnLaPlaya)})
		assert.equals(40, calamardo40.peso())
	}

	test "2.2.1 test atleta running" {
		bob.aplicaRutina(correrEnLaPlaya)
		assert.equals(39.725, bob.peso().truncate(3))
	}

	test "2.2.2 test atleta maraton" {
		bob.aplicaRutina(maratonBA)
		assert.equals(37.812, bob.peso().truncate(3))
	}

	test "2.2.3 test atleta remo" {
		assert.throwsException({ bob.aplicaRutina(remarEnElDelta)})
		assert.equals(40, bob.peso().truncate(3))
	}

	test "2.2.3 test atleta remo de competición" {
		bob.aplicaRutina(remarEnCaminoRemeros)
		assert.equals(39.406, bob.peso().truncate(3))
	}

//punto 3: Consultas
	test "3.1 el mejor predio" {
		assert.equals(recreo, clubBarrial.mejorPredio(bob))
		assert.equals(recreo, clubBarrial.mejorPredio(calamardo))
	}

	test "3.2 predios tranquis" {
		assert.equals(#{}, clubBarrial.prediosTranqui(bob))
		assert.equals(#{ recreo }, clubBarrial.prediosTranqui(calamardo))
	}

	test "3.3 rutinas más exigentes" {
		assert.equals(#{ maratonBA, remarEnCaminoRemeros }, clubBarrial.rutinasMasExigentes(bob))
		assert.equals(#{ maratonBA, remarEnElDelta }, clubBarrial.rutinasMasExigentes(calamardo))
	}

}
